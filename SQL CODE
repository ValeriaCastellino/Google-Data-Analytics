1 - PREPARE DATA

** COMBINING ALL TABLES INTO ONE **


 --I combined 12 tables (each for one month in the period between November 2023 and October 2024) into one.
 
 SELECT *   FROM `effective-reach-425916-a5.cyclistic_project.users_202311`
  UNION ALL
  SELECT * FROM `effective-reach-425916-a5.cyclistic_project.users_202312`
  UNION ALL
  SELECT * FROM `effective-reach-425916-a5.cyclistic_project.users_202401`
  UNION ALL
  SELECT * FROM `effective-reach-425916-a5.cyclistic_project.users_202402`
  UNION ALL
  SELECT * FROM `effective-reach-425916-a5.cyclistic_project.users_202403`
  UNION ALL
  SELECT * FROM `effective-reach-425916-a5.cyclistic_project.users_202404`
  UNION ALL
  SELECT * FROM `effective-reach-425916-a5.cyclistic_project.users_202405`
  UNION ALL
  SELECT * FROM `effective-reach-425916-a5.cyclistic_project.users_202406`
  UNION ALL
  SELECT * FROM `effective-reach-425916-a5.cyclistic_project.users_202407`
  UNION ALL
  SELECT * FROM `effective-reach-425916-a5.cyclistic_project.users_202408`
  UNION ALL
  SELECT * FROM `effective-reach-425916-a5.cyclistic_project.users_202409`
  UNION ALL
  SELECT * FROM `effective-reach-425916-a5.cyclistic_project.users_202410`
  ;


  --The resulting data set was saved as user_analysis_202311_202410. The dataset counts 6,012,003 records in total.



2 - CLEANING DATA

```sql

-- I checked for duplicates rides.


SELECT DISTINCT ride_id,rideable_type, started_at, ended_at, start_station_name,member_casual
FROM effective-reach-425916-a5.cyclistic_project.users_analysis_202311_202410;


--Tot distinct rides are 5,788,839 against 6,012,003 entries. There were 223,164 duplicates.




-- Cleaning data set from duplicate and null values.


SELECT DISTINCT *
FROM `effective-reach-425916-a5.cyclistic_project.users_analysis_202311_202410`
WHERE
  start_station_name IS NOT NULL AND
  start_station_id IS NOT NULL AND
  end_station_name IS NOT NULL AND
  end_station_id IS NOT NULL AND
  start_lat IS NOT NULL AND
  start_lng IS NOT NULL AND
  end_lat IS NOT NULL AND
  end_lng IS NOT NULL;


  -- Data set named users_analysis_cleandata. This table contains distinct ride_id, and ride_ids that donâ€™t have null values for start and end stations. The table contains 4,159,741 records. I have saved a table for these distinct rides to work on.






-- Data tested for consistency: I first got the total numbero for ride_id, rideable_type, and member_casual too


SELECT COUNT (*), rideable_type
FROM `effective-reach-425916-a5.cyclistic_project.distinct_users_analysis`
GROUP BY rideable_type;


SELECT COUNT (*), member_casual
FROM `effective-reach-425916-a5.cyclistic_project.distinct_users_analysis`
GROUP BY member_casual;


SELECT
  LENGTH (ride_id)
FROM
  `effective-reach-425916-a5.cyclistic_project.distinct_users_analysis`
WHERE
 LENGTH(ride_id) >16 AND
 LENGTH(ride_id) <16


SELECT
  LENGTH (member_casual)
FROM
  `effective-reach-425916-a5.cyclistic_project.distinct_users_analysis`
WHERE
  LENGTH (member_casual) <> 6






-- Create columns for trip duration (in minutes), month, day of the week. Outliers for trip duration less than 1 minute or more than 1440 removed.


   SELECT
  ride_id,
  rideable_type,
  started_at,
  ended_at,
  trip_duration_minute,
  CASE
  EXTRACT(MONTH FROM started_at)
    WHEN 1 THEN 'January'
    WHEN 2 THEN 'February'
    WHEN 3 THEN 'March'
    WHEN 4 THEN 'April'
    WHEN 5 THEN 'May'      
    WHEN 6 THEN 'June'
    WHEN 7 THEN 'July'
    WHEN 8 THEN 'August'
    WHEN 9 THEN 'September'
    WHEN 10 THEN 'October'      
    WHEN 11 THEN 'November'
    WHEN 12 THEN 'December'
  END AS month,
  CASE EXTRACT(DAYOFWEEK FROM started_at)
    WHEN 1 THEN 'Sunday'
    WHEN 2 THEN 'Monday'
    WHEN 3 THEN 'Tuesday'
    WHEN 4 THEN 'Wednesday'
    WHEN 5 THEN 'Thursday'
    WHEN 6 THEN 'Friday'
    WHEN 7 THEN 'Saturday'    
  END AS day_of_week,
  start_station_name,
  start_station_id,
  end_station_name,
  end_station_id,
  start_lat,
  start_lng,
  end_lat,
  end_lng,
  member_casual,
FROM `effective-reach-425916-a5.cyclistic_project.users_analysis_cleandata` AS data1
JOIN
  (SELECT ride_id,
   TIMESTAMP_DIFF(ended_at, started_at, MINUTE) AS trip_duration_minute
  FROM `effective-reach-425916-a5.cyclistic_project.users_analysis_cleandata`) AS data2
USING(ride_id)
WHERE trip_duration_minute > 1 AND trip_duration_minute < 1440
  ;


-- Table named cyclistic_users_analysis with 4,045,952 records that will be used for analysis.



3 - DATA ANALYSIS


-- Number of casual riders and members' rides


SELECT COUNT (ride_id) AS number, member_casual
FROM `effective-reach-425916-a5.cyclistic_project.cyclistic_users_analysis`
GROUP BY member_casual
;


-- We have 1483393 casuals' rides against 2562559 members' rides



 --What is the favorite rideable type for both,casual riders and members?


SELECT COUNT (rideable_type)AS total_rides_per_type,rideable_type, member_casual
FROM `effective-reach-425916-a5.cyclistic_project.cyclistic_users_analysis`
GROUP BY rideable_type,member_casual
ORDER BY total_rides_per_type DESC;


-- Both casual riders and members prefer classic bikes(954714 and 1696622)over electric bikes (503854 and 844887). The less favorite in both cases are electric scooters (24825 and 21050)





-- What is the average trip duration for casual riders and members?


SELECT ROUND(AVG (trip_duration_minute),0) AS avg_tripduration,member_casual
FROM `effective-reach-425916-a5.cyclistic_project.cyclistic_users_analysis`
GROUP BY member_casual
;


-- Casual riders rent a bike for longer than members (24 minutes against 12)



-- Which months are the favorite for casual and members to ride?


SELECT COUNT (month) AS rides_x_month, month, member_casual
FROM `effective-reach-425916-a5.cyclistic_project.cyclistic_users_analysis`
GROUP BY month, member_casual
ORDER BY rides_x_month DESC;


-- Casual riders prefer to ride in July and August, when less favorite months seem to be December and February. Members dislike December and February the most too, but they prefer September and August for their rides.





-- What day of the week are casual riders and members most keen to a ride?


SELECT COUNT (day_of_week)AS rides_x_day,day_of_week, member_casual
FROM `effective-reach-425916-a5.cyclistic_project.cyclistic_users_analysis`
GROUP BY day_of_week, member_casual
ORDER BY rides_x_day DESC
;


--Casual riders need a bike especially on Saturday and Sunday (which suggest a leisure consume, against commuting), when members ride the most on Wednesdays and Thursday. Casual rides less favorite days for a ride are Tuesday and Monday. Members don't ride on Sunday and Saturday.






-- Number of trips per hour


SELECT member_casual,
EXTRACT(HOUR FROM started_at) AS hour_of_day,
COUNT(*) AS total_trips
FROM `effective-reach-425916-a5.cyclistic_project.cyclistic_users_analysis`
GROUP BY member_casual,hour_of_day
ORDER BY member_casual, total_trips DESC;


-- Casual riders likely rent a bike in the afternoon hours. For members the use of bikes is spread over the all day.






-- Hourly rides distribution over the week


SELECT member_casual, day_of_week,
EXTRACT(HOUR FROM started_at) AS hour_of_day,
COUNT (*) AS rides_x_hour
FROM `effective-reach-425916-a5.cyclistic_project.cyclistic_users_analysis`
GROUP BY member_casual, day_of_week, hour_of_day
ORDER BY member_casual,day_of_week, rides_x_hour DESC;






-- Starting location for casual riders


SELECT member_casual, start_station_name,
AVG(start_lat) AS start_lat,
AVG(start_lng) AS start_lng,
COUNT(*) AS total_rides
FROM `effective-reach-425916-a5.cyclistic_project.cyclistic_users_analysis`
WHERE member_casual = 'casual'
GROUP BY member_casual, start_station_name
ORDER BY total_rides DESC;






-- Ending location for casual


SELECT member_casual, end_station_name,
AVG(end_lat) AS end_lat,
AVG(end_lng) AS end_lng,
COUNT(*) AS total_rides
FROM `effective-reach-425916-a5.cyclistic_project.cyclistic_users_analysis`
WHERE member_casual = 'casual'
GROUP BY member_casual, end_station_name
ORDER BY total_rides DESC;






-- Starting location for members


SELECT member_casual, start_station_name,
AVG(start_lat) AS start_lat,
AVG(start_lng) AS start_lng,
COUNT(*) AS total_rides
FROM `effective-reach-425916-a5.cyclistic_project.cyclistic_users_analysis`
WHERE member_casual = 'member'
GROUP BY member_casual, start_station_name
ORDER BY total_rides DESC;






-- Ending location for members


SELECT member_casual, end_station_name,
AVG(end_lat) AS end_lat,
AVG(end_lng) AS end_lng,
COUNT(*) AS total_rides
FROM `effective-reach-425916-a5.cyclistic_project.cyclistic_users_analysis`
WHERE member_casual = 'member'
GROUP BY member_casual, end_station_name
ORDER BY total_rides DESC;

